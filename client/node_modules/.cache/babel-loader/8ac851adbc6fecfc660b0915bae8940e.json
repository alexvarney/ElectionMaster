{"ast":null,"code":"var _jsxFileName = \"/home/alexander/Documents/candidatelist/v2/client/src/components/CandidatePanel.js\";\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport './css/CandidatePanel.css';\nimport moment from 'moment';\nimport CandidatePanelCircle from './CandidatePanelCircle';\nimport CandidateTitleCard from './CandidateTitleCard';\n\nclass CandidatePanel extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getRandomIntInclusive = (min, max) => {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    };\n  }\n\n  render() {\n    const candidate = this.props.candidates.candidates ? this.props.candidates.candidates.filter(item => item._id === this.props.candidates.selectedCandidateId)[0] : null;\n    if (!candidate) return null;\n    const sorted = this.props.candidates.candidates.sort((a, b) => a.polling > b.polling ? -1 : 1);\n    const rank = sorted.indexOf(candidate) + 1;\n    const name = candidate.name,\n          state = candidate.state,\n          dob = candidate.dob,\n          slogan = candidate.slogan,\n          status = candidate.status,\n          polling = candidate.polling,\n          description = candidate.description,\n          image = candidate.image,\n          website = candidate.website,\n          websiteDisplay = candidate.websiteDisplay,\n          partyAffiliation = candidate.partyAffiliation;\n    const years = moment().diff(dob, 'years');\n    const circleBg = {\n      backgroundColor: \"hsla(\".concat(this.getRandomIntInclusive(0, 360), \",42%,22%,1.0)\")\n    };\n    return React.createElement(\"div\", {\n      className: \"candidatePanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"circle_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"circle__inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"circle__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"circle__content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"circle_polling\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, Math.floor(polling), \"%\"), React.createElement(\"span\", {\n      class: \"circle_rank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"#\", rank)))), React.createElement(\"div\", {\n      style: circleBg,\n      className: \"circle__after\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  candidates: state.candidates\n});\n\nexport default connect(mapStateToProps, {})(CandidatePanel);","map":{"version":3,"sources":["/home/alexander/Documents/candidatelist/v2/client/src/components/CandidatePanel.js"],"names":["connect","React","Component","moment","CandidatePanelCircle","CandidateTitleCard","CandidatePanel","getRandomIntInclusive","min","max","Math","ceil","floor","random","render","candidate","props","candidates","filter","item","_id","selectedCandidateId","sorted","sort","a","b","polling","rank","indexOf","name","state","dob","slogan","status","description","image","website","websiteDisplay","partyAffiliation","years","diff","circleBg","backgroundColor","mapStateToProps"],"mappings":"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","sourcesContent":["import {connect} from 'react-redux';\nimport React, { Component } from 'react'\nimport './css/CandidatePanel.css';\nimport moment from 'moment';\nimport CandidatePanelCircle from './CandidatePanelCircle';\n\nimport CandidateTitleCard from './CandidateTitleCard';\n\nclass CandidatePanel extends Component {\n\n    getRandomIntInclusive = (min, max) => {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min; \n      }\n\n    render() {\n\n        const candidate = this.props.candidates.candidates ?this.props.candidates.candidates.filter((item)=>item._id === this.props.candidates.selectedCandidateId)[0]:null;\n\n        if(!candidate) return null;\n\n        const sorted = this.props.candidates.candidates.sort((a,b)=>(a.polling>b.polling)?-1:1);\n\n        const rank = sorted.indexOf(candidate) + 1;\n\n        const {name, state, dob, slogan, status, polling, description, image, website, websiteDisplay, partyAffiliation} = candidate;\n    \n        const years = moment().diff(dob, 'years');\n\n        const circleBg = {backgroundColor: `hsla(${this.getRandomIntInclusive(0,360)},42%,22%,1.0)`};\n        \n        return (\n            <div className=\"candidatePanel\">\n                <div className=\"circle_container\">\n                    <div className=\"circle\">\n                        <div className=\"circle__inner\">\n                            <div class=\"circle__wrapper\">\n                                <div class=\"circle__content\">                    \n                                    <span class=\"circle_polling\">{Math.floor(polling)}%</span>\n                                   <span class=\"circle_rank\">#{rank}</span>\n                                </div>\n                            </div>\n                        </div>\n                        <div style={circleBg} className=\"circle__after\"></div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    candidates: state.candidates,\n})\n\nexport default connect(mapStateToProps, {})(CandidatePanel);"]},"metadata":{},"sourceType":"module"}